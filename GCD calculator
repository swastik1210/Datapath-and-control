// calculate GCD of 2 numbers
// module instantiation

odule GCD_dp(gt,lt,eq,lda,ldb,sel1,sel2,sel_in,data_in,clk);
  input lda,ldb,sel1,sel2,sel_in,clk;
  input [15:0]data_in;
  output gt,lt,eq;
  wire [15:0]aout,bout,x,y,subout,bus;
  
  FIFO A(aout,bus,lda,clk);
  FIFO B(bout,bus,ldb,clk);
  MUX M1(x,aout,bout,sel1);
  MUX M2(y,aout,bout,sel2);
  MUX Ml(bus,subout,data_in,sel_in);
  SUB SB(subout,x,y);
  COMP C(lt,gt,eq,aout,bout);
endmodule

module FIFO (dout,din,ld,clk);
  input ld,clk;
  input [15:0]din;
  output reg [15:0]dout;
  always @(posedge clk)
  if(ld)
    dout<=din;
endmodule

module MUX(dout,in0,in1,sel);
  input [15:0]in0,in1;
  input sel;
  output [15:0]dout;
  assign dout=sel?in1:in0;
endmodule

module SUB(out,in0,in1);
  input [15:0]in0,in1;
  output reg [15:0]out;
  always @(*)
    out=in0-in1;
endmodule

module COMP(lt,gt,eq,d1,d2);
  input [15:0]d1,d2;
  output lt,gt,eq;
  assign lt= d1<d2;
  assign gt= d2<d1;
  assign eq= d1==d2;
endmodule

module controller(lda,ldb,sel1,sel2,sel_in,done,clk,lt,gt,eq,start);
  input clk,lt,gt,eq,start;
  output reg lda,ldb,sel1,sel2,sel_in,done;
  reg [2:0]state;
  parameter s0=3'b000,s1=3'b001,s2=3'b010,s3=3'b011,s4=3'b100,s5=3'b101;
  always @(posedge clk)
    begin
      case(state)
        s0:if(start) state<=s1;
        s1: state<=s2;
        
        s2: #2 if(eq) state<=s5;
        else if (lt) state<=s3;
        else if (gt) state<=s4;
       
        s3: #2 if(eq) state<=s5;
        else if (lt) state<=s3;
        else if (gt) state<=s4;
        
        s4: #2 if(eq) state<=s5;
        else if (lt) state<=s3;
        else if (gt) state<=s4;
        
        s5: state<=s5;
        default:state<=s0;
      endcase
    end
  always @(state)
    begin
      case(state)
        s0: begin sel_in=1;lda=1;ldb=0;done=0;end
        s1: begin sel_in=1;lda=0;ldb=1;end
        
        s2:if (eq) done=1;
        else if (lt) begin
          sel1=1;sel2=0;sel_in=0;
          #1 lda=0;ldb=1; end
        else if (gt) begin
          sel1=0;sel2=1;sel_in=0;
          #1 lda=1;ldb=0;end
        
        s3:if (eq) done=1;
        else if (lt) begin
          sel1=1;sel2=0;sel_in=0;
          #1 lda=0;ldb=1; end
        else if (gt) begin
          sel1=0;sel2=1;sel_in=0;
          #1 lda=1;ldb=0;end
        
        s4:if (eq) done=1;
        else if (lt) begin
          sel1=1;sel2=0;sel_in=0;
          #1 lda=0;ldb=1; end
        else if (gt) begin
          sel1=0;sel2=1;sel_in=0;
          #1 lda=1;ldb=0;end
        
        s5:begin
          done=1;sel1=0;sel2=0;lda=0;ldb=0;end
        default:begin lda=0;ldb=0; end
      endcase
    end
endmodule

// test bench

